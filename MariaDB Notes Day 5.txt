Day 5

IPTables:

Temporarily open ports (won't survive reboot):

These on the client-facing network adapter/IP:
iptables -I INPUT -p tcp -m state --state=new --dport 3306 -j ACCEPT

These on the private backplane network adapter/IP:

iptables -I INPUT -p tcp -m state --state=new --dport 4567 -j ACCEPT
iptables -I INPUT -p tcp -m state --state=new --dport 4568 -j ACCEPT
iptables -I INPUT -p tcp -m state --state=new --dport 4444 -j ACCEPT


To make these changes survive reboot, add the parameters to

/etc/sysconfig/iptables

(Add lines like the Port 22 line, but with the port numbers above)

(you can flush and re-read the config with:

/etc/init.d/iptables restart


On both "master" and "slave1"

sestatus - find out current mode - want permissive or disabled FOR NOW!
setenforce 0 (reboot???)


yum install galera

Modify the /etc/my.cnf.d/server.cnf:

# this is only for the mysqld standalone daemon
[mysqld]
;basedir=/mariadb_runtime/
datadir=/mariadb_runtime/data/
;general-log=/mariadb_runtime/logs/mariadb.log
;log-slow-queries=/mariadb_runtime/mariadb.slow.log
log-error=/mariadb_runtime/logs/mariadb.error.log
bind-address=0.0.0.0
;user=mysql
pid-file=/mariadb_runtime/run/mariadb.pid
socket=/mariadb_runtime/run/mariadb.sock
log_bin=/mariadb_runtime/data/binlog
;binlog_format=MIXED
server_id=1

#
# * Galera-related settings
#
[galera]
# Mandatory settings
wsrep_on=ON
#wsrep_provider=
wsrep_provider=/usr/lib64/galera/libgalera_smm.so
wsrep_cluster_address="gcomm://192.168.2.98,192.168.2.99"
binlog_format=ROW
default_storage_engine=InnoDB
innodb_autoinc_lock_mode=2
#innodb_doublewrite=0
innodb_support_xa=0
query_cache_size=0






change mysql password (as root), 

passwd mysql

change the mysql user shell

chsh -s /bin/sh mysql


(Remember to do the above on both machine!)


On "master"
log in as mysql
start mysqld in new cluster mode
mysqld --wsrep-new-cluster

On "slave1":
Start mysqld_safe normally
mysqld_safe &

On "master":
stop the cluster initiation mysqld:
service mysql stop

Start the mysqld_safe normally
mysqld_safe &



Optimistic Locking:

Web App
select * from Customer where (customerId = 1);
	Harry @ 12:03

update Customer set phoneNumber = "" and ts="12:04" 
	where customerId = 1 and ts=12:03


iPhone App:
select * from Customer where (customerId = 1);
	Harry @ 12:03

update Customer set phoneNumber = "" and ts="12:04" 
	where customerId = 1 and ts=12:03
	fails because the web app modifed ts to 12:04
	(0 records updated)





Performance Monitoring and Tuning
	EXPLAIN/ANALYZE

Monyog

	On one of the linux machines, download and rpm install monyog:
	wget https://www.webyog.com/downloadtracker?wy=1512104\&pType=RPM\&bit=64 -O MONyog-6.5.3-0.x86_64.rpm
	rpm -i MONyog-6.5.3-0.x86_64.rpm

	On the Windows desktop, open a browser to:
	http://192.168.2.98:5555

	On the login screen, just click Login (admin has no password)
	For the trial edition, give it a fake email address
	It will ask to add a server.
		Name: master
		Tag:	GaleraDev
		MySQL Host: 192.168.2.98
		MySQL Username: root
		MySQL Password: Pa$$w0rd

		Connection Type: SSH Tunnel
		SSH Host: 198.168.2.98
		SSH UserName: root
		Authentication Type: Password
		SSH Password: Pa$$w0rd

	Next>

		Do you wnat to use SSH Connection: Yes
		OS of the host: Linux
		Use same as tunnel details: (Check)

	Save All (Ignore last two screens)


	Select "Real Time" Menu Bar option
	Start a new session

	In Linux/mysql prompt, fire off a few queries and see results



Nagios


Break for Lunch, then come back and optionally install
  Monyog until 3:15







Docker


CONNECT engine (later, possibly tomorrow or Friday)
	Connect for SQL Server
	Connect for Txt file
	Connection to Hive (as time allows)



