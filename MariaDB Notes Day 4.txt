Global variables vs. Session Variables
Dynamic vs. Static Variables


Replication
	Asynchronous
	Master/Slave
	Slave can have multiple masters
		(Slave can be slave to Accounting and Inventory,
			but not Accounting Master A and Master B)

Binlog format
	Statement - if it might modify the data/structure, 
		send SQL statement to slaves
		Deterministic or non-deterministic problem
			sysdate(), rand(), etc
		Isolation Levels: Read-Committed and Read-Uncommitted
	Row - data diffs, 
		usually less efficient particularly for queries
			that modify a lot of records at once
		may be more efficient when a lot of operations
			modify a small number of rows
		Doesn't care about deterministic/non-deterministic

	Mixed - best of both, but may be wrong if deterministic
		/non-deterministic info is inaccurate
		set a = sysdate();
		insert into Customer values (..., @a, ...);
		Isolation Levels: Read-Committed and Read-Uncommitted

	Change binlog format on a session basis
		MariaDB [(none)]> SET @@binlog_format = 'MIXED';

	Can't change it inside a stored program (function/proc)
		(AFAIK, hopefully will change soon 
			but technical hurdles exist)



Exercise: 

Install a larger data set
	weasleydb mysqldump (~3Mb, ~50k records)

wget http://nextgeneducation.com/cvs/xmardba/data/weasleydb.mysql.dump
mysql -u calvin -p
	drop database weasley
	create database weasleydb
	use weasleydb
	source weasleydb.mysql.dump
	show tables
	select * from Customer

Clone the MariaVM (VirtualBox cloning)
	Fix the mysql /etc/init.d script
		Kludge for now
	Shutdown the Linux VM (controlled graceful shutdown)
	shutdown -h now
	In VirtualBox settings, make sure:
		Network Adapter 1 (eth0 in Linux) is Attached To "Bridged Adapter
		Network Adapter 2 (eth1 in Linux) is Attached To "intnet"
		CPU # cores is small (1 or 2 - 
		  total for all VMs running has to be 
		  less than twice the real # of cores/hyper threads)

	Now Right-click on VM in VirtualBox Manager and "Clone"
	Call the clone "MariaDB Slave 1", Re-initialize MAC addresses
	On the next screen, select "Full Clone"
	Open the settings of "MariaDB Slave 1", Network->Adapter1->Advanced
		copy the new MAC address for Adapater 1 to notepad

		On my Slave, the new MAC is: 080027776A22


Launch the original VM, configure as a master
	Re-launch MariaDB VM
	Stop there!
	Take a break until 12:15
	We'll configure as a master when we come back.

	In the my.cnf.d/server.cnf, set the server_id and binlog_format
		server_id=1
		binlog_format=MIXED

	Launch MariaDB on the master

		mysqld_safe &

	For now, open the firewall up:

		iptables -F		(just for now)

	Now create the Slave's user account with REPLICATION SLAVE permission:

	MariaDB [(none)]> CREATE USER 'slave1'@'%' IDENTIFIED BY 'password';
	MariaDB [(none)]> GRANT REPLICATION SLAVE ON *.* TO 'slave1'@'%';

	(We can optionally tack on " REQUIRE SSL" to that last, forcing REPLICATION 
	  to only occur over SSL. This is highly recommended, 
	  but requires SSL to be set up properly beforehand.)

MariaDB [(none)]> FLUSH TABLES WITH READ LOCK;
MariaDB [(none)]> SHOW MASTER STATUS;	(note the binlog coordinates)
MariaDB [(none)]> UNLOCK TABLES;

binlog.000003	629


Launch the copy, configure as a slave

	Launch the Slave1 VM
	Configure the network
		Alter the /etc/sysconfig/networking/devices/eth0 with the new MAC address
		/etc/init.d/network restart

	OR
		system-config-network-tui
			Device Configuration
			Add New Device
			-> Ethernet
			...Name = eth2 or eth3 (whichever was "public" internet)
			...Device = (same as Name)
			...Use DHCP = [*]   (check using spacebar)
			...Peer DNS = [*]   
			...On Boot = [*]   
			...Controller By Network Manager = [*]
			OK
			Select the new Ethernet in the list
			Save Button
			Activate Button
			Cancel
			Save & Quit

		/sbin/ifup eth2 (or whichever is public)
			   

	Restart the network if necessary, verify we have a new IP address ('ifconfig eth0')

		/etc/init.d/network restart
		ifconfig -a
		iptables -F		(just for now)

	Ping the master's IP address from the slave
		ping 192.168.2.99

	Ping the slave's IP address from the master
		ping 192.168.2.98

	(Control-C to get out of ping)

Now Let's update the slave1 server config

	In my.cnf files, set the 
		log_slave_updates=ON
		server_id=2
		binlog_format=MIXED

	Launch MariaDB on the slave

		mysqld_safe &

	Launch the client and configure a different server_id, binlog, and tell it 
	  to log slave updates:

MariaDB [(none)]> SET @@log_bin="binlog"	(you already did this earlier in my.cnf files)
MariaDB [(none)]> SET @@binlog_format = 'MIXED';



	Now we need to tell the slave who its master is - most of these values
	  are things you should have noted above (master ip, slave user/password, etc):

MariaDB [(none)]> CHANGE MASTER TO
	-> MASTER_HOST = '(ip address of master)',
	-> MASTER_USER = 'slave1',
	-> MASTER_PASSWORD = 'password',
	-> MASTER_PORT = 3306,
	-> MASTER_LOG_FILE = 'binlog.000003',	(from master binlog coords)
	-> MASTER_LOG_POS = 629			(from master binlog coords)

	Now that we've told it who's boss, have it report for duty.

MariaDB [(none)]> START SLAVE;


Verify replication is working 
	1. they can see each other

MariaDB [(none)]> SHOW SLAVE STATUS;

	2. Modify the data on the master (insert/update/delete)
	3. Verify data on the slave

Verify replication survives failure
	1. Shut down slave

MariaDB [(none)]> STOP SLAVE;

	2. Modify data on master

	3. Restart slave

MariaDB [(none)]> RESET SLAVE;
MariaDB [(none)]> START SLAVE;

	4. Verify data on slave





Lunch + Replication Lab from now until 3:10 Eastern








